# Dados do mercado financeiro são interessantes e ricos: cada ação negociada na
bolsa de valores tem um preço que varia a cada dia. Você foi contratado como
cientista de dados de uma empresa de Wall Street para criar modelos preditivos
que, a partir da variação diária do preço das ações, consigam subsidiar e melhorar
decisões de compra e venda de ações. Você disse que, como todo bom cientista de dados, 
gostaria de explorar os dados para entender suas características antes de
criar qualquer modelo preditivo.

{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Giseleptbr/Pyspark/blob/main/Desenvolvendo%20Solu%C3%A7%C3%B5es%20Utilizando%20Apache%20Spark\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "7b0c15c0-f170-45e1-a50d-951d0a96d32d",
      "metadata": {
        "id": "7b0c15c0-f170-45e1-a50d-951d0a96d32d"
      },
      "source": [
        "Iniciando Spark..."
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install pyspark"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "a4xyb12rv6W1",
        "outputId": "58cdd00f-dae3-4998-982a-fc72cc4c0b55"
      },
      "id": "a4xyb12rv6W1",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting pyspark\n",
            "  Downloading pyspark-3.5.0.tar.gz (316.9 MB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m316.9/316.9 MB\u001b[0m \u001b[31m4.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25h  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "Requirement already satisfied: py4j==0.10.9.7 in /usr/local/lib/python3.10/dist-packages (from pyspark) (0.10.9.7)\n",
            "Building wheels for collected packages: pyspark\n",
            "  Building wheel for pyspark (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "  Created wheel for pyspark: filename=pyspark-3.5.0-py2.py3-none-any.whl size=317425344 sha256=ddf9df16e709cf9d52af118bfd82c81b63e16dd0c034d96a1a08eecc077a54c2\n",
            "  Stored in directory: /root/.cache/pip/wheels/41/4e/10/c2cf2467f71c678cfc8a6b9ac9241e5e44a01940da8fbb17fc\n",
            "Successfully built pyspark\n",
            "Installing collected packages: pyspark\n",
            "Successfully installed pyspark-3.5.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "6e126342-f644-491b-a916-6170177c1ac6",
      "metadata": {
        "id": "6e126342-f644-491b-a916-6170177c1ac6"
      },
      "outputs": [],
      "source": [
        "from pyspark.sql import SparkSession\n",
        "\n",
        "spark = SparkSession.builder.appName('TP01').getOrCreate()\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "a3468a10-bb78-4042-973b-71be1b1812e2",
      "metadata": {
        "id": "a3468a10-bb78-4042-973b-71be1b1812e2"
      },
      "source": [
        "Carregando os dados..."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "be05b616-37f2-4bab-b058-693ddeb54e87",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "be05b616-37f2-4bab-b058-693ddeb54e87",
        "outputId": "d28a6155-b3ca-4cd9-9e3d-c44803779b34"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n",
            "|PK\u0003\u0004-\u0000\u0000\u0000\\b\u0000��4O�?K���������\u0012\u0000\u0014\u0000all_stocks_5yr.csv\u0001\u0000\u0010\u0000\u0005]�\u0001\u0000\u0000\u0000\u0000Z��\u0000\u0000\u0000\u0000\u0000d}َ$��ݻ������\u001e��0�\\v\u0003��c`�c����\u001cFfPu��LJAQ\u00147Q�����������\u001f?����ۿ����������������_�Ͽ���?����?�R������S�߲������\\�g[Y�������\u0001�\u0015?��F��&�6�ޭ����\u0006���j�~vm�\u00174���1±��7�6�/\\�\\vy\u001c���|����^�������Y����1����!6\u0002� A+|\n",
            "+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n",
            "|                                                                                                                                                                                                                                                               ��av����\\a���\\v��...|\n",
            "|                                                                                                                                                                                                                                                               �I\u001fZ\u0014�ˏ��f���z>>�...|\n",
            "|                                                                                                                                                                                                                                                               .S�\\v���S��z�\u0014�np...|\n",
            "|                                                                                                                                                                                                                                                               ��e��^!ŉ�ԋ~�Zi\u0017p-...|\n",
            "|                                                                                                                                                                                                                                                               �\u001c�K��ۯ�I����9�#p...|\n",
            "+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n",
            "only showing top 5 rows\n",
            "\n"
          ]
        }
      ],
      "source": [
        "df = spark.read.csv('all_stocks_5yr.csv.zip', header= True,inferSchema = True)\n",
        "df.show(5)"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "KhJY4TGMwc1t",
        "outputId": "4c845503-4fd6-4879-e991-3d905bed56d0"
      },
      "id": "KhJY4TGMwc1t",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mounted at /content/drive\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "id": "81ab38ca-35aa-48fe-8666-ac82083bcf02",
      "metadata": {
        "id": "81ab38ca-35aa-48fe-8666-ac82083bcf02"
      },
      "source": [
        "# Pergunta 1 - Quantos registros há na planilha?"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "0211fd41-72cd-4a3f-ae9d-5f8f6f50e142",
      "metadata": {
        "id": "0211fd41-72cd-4a3f-ae9d-5f8f6f50e142",
        "outputId": "c0333760-e8c4-4306-f737-2830015462e3"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "619040"
            ]
          },
          "execution_count": 115,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "df.count()"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "906bf7a1-4a19-4d5a-95c2-04d72b62fdd3",
      "metadata": {
        "id": "906bf7a1-4a19-4d5a-95c2-04d72b62fdd3"
      },
      "source": [
        "# Pergunta 2 - Quantos registros há na planilha para a ação da Apple (AAPL)?"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "7013c4a9-5aa1-4c54-894f-ff01dea478c5",
      "metadata": {
        "id": "7013c4a9-5aa1-4c54-894f-ff01dea478c5",
        "outputId": "9745c968-af56-4fe0-e9fc-95664c5fc00f"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "1259"
            ]
          },
          "execution_count": 4,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "df.filter(df['Name']== 'AAPL').count()"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "41402546-c06f-40e0-849a-a111a1bcb2a9",
      "metadata": {
        "id": "41402546-c06f-40e0-849a-a111a1bcb2a9"
      },
      "source": [
        "# Pergunta 3 - Quantas empresas distintas têm registros nessa planilha?"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "a9d51c87-2bd6-4b2f-82db-4b04e02e479d",
      "metadata": {
        "id": "a9d51c87-2bd6-4b2f-82db-4b04e02e479d",
        "outputId": "ce4e883e-889b-4334-cad5-b71d77ba1719"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "505"
            ]
          },
          "execution_count": 14,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "df.groupby('Name').avg().count()"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "92ea1792-2cca-4065-b53c-9132308b115d",
      "metadata": {
        "id": "92ea1792-2cca-4065-b53c-9132308b115d"
      },
      "source": [
        "# Pergunta 4 - Com qual frequência o preço de uma ação no fechamento é maior do que o preço na abertura?"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "a5d87939-bb64-405d-bb1a-6d92aae6a5ce",
      "metadata": {
        "id": "a5d87939-bb64-405d-bb1a-6d92aae6a5ce",
        "outputId": "130f5817-3164-4b14-dc6b-16a24f2e65d7"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "+----------+-----+-----+-----+-----+-------+----+\n",
            "|      date| open| high|  low|close| volume|Name|\n",
            "+----------+-----+-----+-----+-----+-------+----+\n",
            "|2013-02-08|15.07|15.12|14.63|14.75|8407500| AAL|\n",
            "+----------+-----+-----+-----+-----+-------+----+\n",
            "only showing top 1 row\n",
            "\n"
          ]
        }
      ],
      "source": [
        "df.show(1)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "8bc461ce-bb4f-4e01-8c68-8f18747a147d",
      "metadata": {
        "id": "8bc461ce-bb4f-4e01-8c68-8f18747a147d",
        "outputId": "c81fb5ea-72eb-42c1-8dd0-54c63d8188b1"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "0.5152655724993538"
            ]
          },
          "execution_count": 28,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "#metodo 01\n",
        "quest4 = df.withColumn('verifica',df['close'] > df['open'] ).groupBy('verifica').count().collect()\n",
        "quest4[1][1]/df.count()\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "6f96e0f2-692a-4101-9e8e-ae376f055aa3",
      "metadata": {
        "id": "6f96e0f2-692a-4101-9e8e-ae376f055aa3",
        "outputId": "fbd34453-bb16-413e-c918-457a555d69f9"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "0.5152655724993538"
            ]
          },
          "execution_count": 41,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "#metodo 02\n",
        "df.filter((df['close'] > df['open']) == True).count()/df.count()"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "c1bf79b6-91c2-491b-9b22-4992539d17ae",
      "metadata": {
        "id": "c1bf79b6-91c2-491b-9b22-4992539d17ae"
      },
      "source": [
        "# Pergunta 5 -\n",
        "Qual o maior valor das ações da Apple (AAPL) na história?"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "78b02d36-00f1-4df3-8072-acefcb317171",
      "metadata": {
        "id": "78b02d36-00f1-4df3-8072-acefcb317171",
        "outputId": "61e44afb-ace9-4ba8-e5ca-725a116afb79"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "+----+---------+---------+--------+----------+-----------+\n",
            "|Name|max(open)|max(high)|max(low)|max(close)|max(volume)|\n",
            "+----+---------+---------+--------+----------+-----------+\n",
            "|AAPL|   179.37|    180.1|  178.25|    179.26|  266833581|\n",
            "+----+---------+---------+--------+----------+-----------+\n",
            "\n"
          ]
        }
      ],
      "source": [
        "df.groupBy('Name').max().filter(df['Name']== 'AAPL').show()"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "3d6ecedc-15a6-43ac-a2f3-69572c5b9f04",
      "metadata": {
        "id": "3d6ecedc-15a6-43ac-a2f3-69572c5b9f04"
      },
      "source": [
        "# Pergunta 6 -\n",
        "Qual ação tem a maior volatilidade? Uma forma é medir o desvio-padrão do preço de fechamento de cada ação e considerar a ação de maior desvio-padrão."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "8b2418ea-c5b5-43d3-b7c4-43738c82d0be",
      "metadata": {
        "id": "8b2418ea-c5b5-43d3-b7c4-43738c82d0be",
        "outputId": "b212409c-5ba4-49f9-f79e-8b348967eb77"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "+-----+------------------+\n",
            "| Name|         std(open)|\n",
            "+-----+------------------+\n",
            "| PCLN| 320.2424001865882|\n",
            "| AMZN|282.50001943307495|\n",
            "|GOOGL|187.40998599746763|\n",
            "| GOOG|165.99658971383818|\n",
            "|  MTD| 131.3258904904467|\n",
            "+-----+------------------+\n",
            "only showing top 5 rows\n",
            "\n"
          ]
        }
      ],
      "source": [
        "#std calcula o desvio padrao e desc ordena por ordem decrescente\n",
        "from pyspark.sql.functions import std, desc\n",
        "#considerando somente na abertura...\n",
        "df.groupBy('Name').agg(std('open')).sort(desc('std(open)')).show(5)"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "9fb741a5-9295-45b8-a5a6-5215a8e07780",
      "metadata": {
        "id": "9fb741a5-9295-45b8-a5a6-5215a8e07780"
      },
      "source": [
        "# Pergunta 7 -\n",
        "Qual o dia com maior volume total de negociação da bolsa\n",
        "?"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "3b60d1f3-019b-42a1-a427-4ac7399c2d14",
      "metadata": {
        "id": "3b60d1f3-019b-42a1-a427-4ac7399c2d14",
        "outputId": "ca765883-9349-4acd-df3c-2dabf4325617"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "+----------+------------------+------------------+------------------+------------------+-----------+\n",
            "|      date|         sum(open)|         sum(high)|          sum(low)|        sum(close)|sum(volume)|\n",
            "+----------+------------------+------------------+------------------+------------------+-----------+\n",
            "|2015-08-24|        38249.4625|40181.167899999986|36819.638100000004| 38751.26129999999| 4607945196|\n",
            "|2016-06-24|41463.232800000005|        42308.6225|        40929.1217| 41331.38950000001| 4367393052|\n",
            "|2015-12-18|        40903.1314|        41195.2917|40288.369300000006|        40445.5161| 4124454411|\n",
            "|2016-01-20|        37313.6488|        38030.5877|        36303.7561|         37507.195| 4087629753|\n",
            "|2018-02-06|         52893.435|        54986.5812|52290.290499999996|54625.420000000006| 4072080890|\n",
            "+----------+------------------+------------------+------------------+------------------+-----------+\n",
            "only showing top 5 rows\n",
            "\n"
          ]
        }
      ],
      "source": [
        "# a que agrupar por dia e pegar o maior valor\n",
        "df.groupBy('date').sum().sort(desc('sum(volume)')).show(5)"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "5966d60f-629a-4765-8b8f-43e234cd2042",
      "metadata": {
        "id": "5966d60f-629a-4765-8b8f-43e234cd2042"
      },
      "source": [
        "# Pergunta 8 -\n",
        "Qual a ação mais negociada da bolsa, em volume de transações?"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "fe92ca6b-5b8e-4f6c-936a-42ee20665c7c",
      "metadata": {
        "id": "fe92ca6b-5b8e-4f6c-936a-42ee20665c7c",
        "outputId": "1cf80f33-8f2b-4aef-9463-10b161c7bb72"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "+-----+------------------+------------------+------------------+------------------+------------+\n",
            "| Name|         sum(open)|         sum(high)|          sum(low)|        sum(close)| sum(volume)|\n",
            "+-----+------------------+------------------+------------------+------------------+------------+\n",
            "|  BAC|22292.639800000004| 22493.88509999998|22081.835099999997|22289.560000000016|117884953591|\n",
            "| AAPL|137300.78499999995|        138428.458|136150.26040000023|137314.97340000008| 68046305767|\n",
            "|   GE| 33400.24989999998|33632.197500000075| 33156.57769999999|33396.663999999975| 53023644686|\n",
            "|    F|17767.849800000025|17914.202400000042| 17593.32689999999|          17755.22| 43388129992|\n",
            "|   FB|121436.91969999998|122609.90489999989|120187.96619999992|121466.57040000003| 43258314899|\n",
            "| MSFT| 64242.23040000004|64757.932899999934| 63743.66950000001| 64288.41850000011| 42641653597|\n",
            "|  AMD| 7055.832899999998| 7198.014099999995|         6907.6707| 7052.744999999989| 40941468586|\n",
            "|   MU|28939.222999999998|29378.244500000044|28460.082399999974|28922.494100000044| 38082749687|\n",
            "| INTC| 40041.90610000003| 40395.66529999995|39707.500199999966|40075.897200000014| 36922332801|\n",
            "| CSCO|        34905.9765| 35184.48149999998|        34650.5119|34929.460499999994| 36075826186|\n",
            "|  PFE| 40516.33209999998| 40818.20730000001| 40214.29929999998|40518.909999999974| 35527608853|\n",
            "|    T| 45830.67999999997| 46112.65879999997| 45521.48369999998| 45827.35440000003| 31850598073|\n",
            "|  CHK|17250.395400000012|17533.464199999973|16935.320700000007|17224.789999999983| 31421758366|\n",
            "|CMCSA| 37765.47520000002|38081.724299999965|37434.971600000004|37774.710500000016| 30630585625|\n",
            "|  FCX| 26168.35889999999|26539.850800000037|25761.697899999974|26144.860000000048| 29648463667|\n",
            "|    C| 67311.65999999999| 67907.12209999998| 66714.59190000006| 67316.15000000005| 26044628798|\n",
            "|  WFC| 63474.71480000004|63934.669099999905| 63026.91299999996|63490.764999999956| 23305954532|\n",
            "|  JPM| 85130.40890000004| 85794.61760000001| 84477.22580000015| 85162.82999999993| 20885592857|\n",
            "|   RF|13763.935099999999|13915.134099999996|13616.453500000014| 13767.93000000001| 20645650500|\n",
            "| NFLX|119421.22680000009| 121099.8084999999|117695.71049999986|119486.84550000008| 20405882026|\n",
            "+-----+------------------+------------------+------------------+------------------+------------+\n",
            "only showing top 20 rows\n",
            "\n"
          ]
        }
      ],
      "source": [
        "df.groupBy('Name').sum().sort(desc('sum(volume)')).show()"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "cc3a41ab-b4ee-4d03-8c3f-ad02f1874261",
      "metadata": {
        "id": "cc3a41ab-b4ee-4d03-8c3f-ad02f1874261"
      },
      "source": [
        "# Pergunta 9 - Quantas ações começam com a letra “A”? (errada?)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "0c8229d1-5eb1-4488-8759-8ca8f6ed3e38",
      "metadata": {
        "id": "0c8229d1-5eb1-4488-8759-8ca8f6ed3e38",
        "outputId": "8eae1c51-769a-420c-c254-8014f33e192e"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "+-------+------+\n",
            "|inicial| count|\n",
            "+-------+------+\n",
            "|      0|485192|\n",
            "|      1| 72870|\n",
            "|      2| 31640|\n",
            "|      3| 21403|\n",
            "|      4|  5417|\n",
            "|      5|  2518|\n",
            "+-------+------+\n",
            "\n"
          ]
        }
      ],
      "source": [
        "from pyspark.sql.functions import locate\n",
        "df.withColumn('inicial',locate('A',df['Name'])).groupBy('inicial').count().sort('inicial').show()"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from pyspark.sql.functions import locate\n",
        "df.select(\"name\").distinct()\n",
        "df9.filter(df9['name'].startswith(\"A\")).count()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 488
        },
        "id": "oieGM6M87BXL",
        "outputId": "495f0dc9-fd51-490d-cc83-f42f8575203e"
      },
      "id": "oieGM6M87BXL",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "AnalysisException",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mAnalysisException\u001b[0m                         Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-12-5f46469be918>\u001b[0m in \u001b[0;36m<cell line: 2>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mpyspark\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msql\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfunctions\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mlocate\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mdf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mselect\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"name\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdistinct\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0mdf9\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfilter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdf9\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'name'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstartswith\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"A\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcount\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pyspark/sql/dataframe.py\u001b[0m in \u001b[0;36mselect\u001b[0;34m(self, *cols)\u001b[0m\n\u001b[1;32m   3221\u001b[0m         \u001b[0;34m+\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3222\u001b[0m         \"\"\"\n\u001b[0;32m-> 3223\u001b[0;31m         \u001b[0mjdf\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_jdf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mselect\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_jcols\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0mcols\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3224\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mDataFrame\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mjdf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msparkSession\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3225\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/py4j/java_gateway.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args)\u001b[0m\n\u001b[1;32m   1320\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1321\u001b[0m         \u001b[0manswer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgateway_client\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msend_command\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcommand\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1322\u001b[0;31m         return_value = get_return_value(\n\u001b[0m\u001b[1;32m   1323\u001b[0m             answer, self.gateway_client, self.target_id, self.name)\n\u001b[1;32m   1324\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pyspark/errors/exceptions/captured.py\u001b[0m in \u001b[0;36mdeco\u001b[0;34m(*a, **kw)\u001b[0m\n\u001b[1;32m    183\u001b[0m                 \u001b[0;31m# Hide where the exception came from that shows a non-Pythonic\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    184\u001b[0m                 \u001b[0;31m# JVM exception message.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 185\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mconverted\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    186\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    187\u001b[0m                 \u001b[0;32mraise\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mAnalysisException\u001b[0m: [UNRESOLVED_COLUMN.WITH_SUGGESTION] A column or function parameter with name `name` cannot be resolved. Did you mean one of the following? [`PK\u0003\u0004-\u0000\u0000\u0000\b\u0000��4O�?K���������\u0012\u0000\u0014\u0000all_stocks_5yr.csv\u0001\u0000\u0010\u0000\u0005]�\u0001\u0000\u0000\u0000\u0000Z��\u0000\u0000\u0000\u0000\u0000d}َ$��ݻ������\u001e��0�\u000b\u0003��c``�c����\u001cFfPu��LJAQ\u00147Q�����������\u001f?����ۿ����������������_�Ͽ���?����?�R������S�߲������\\�g[Y�������\u0001�\u0015?��F��&�6�ޭ����\u0006���j�~vm�\u00174���1±��7�6�/\\�\u000by\u001c���|����^�������Y����1����!6\u0002� A+`].;\n'Project ['name]\n+- Relation [PK\u0003\u0004-\u0000\u0000\u0000\b\u0000��4O�?K���������\u0012\u0000\u0014\u0000all_stocks_5yr.csv\u0001\u0000\u0010\u0000\u0005]�\u0001\u0000\u0000\u0000\u0000Z��\u0000\u0000\u0000\u0000\u0000d}َ$��ݻ������\u001e��0�\u000b\u0003��c`�c����\u001cFfPu��LJAQ\u00147Q�����������\u001f?����ۿ����������������_�Ͽ���?����?�R������S�߲������\\�g[Y�������\u0001�\u0015?��F��&�6�ޭ����\u0006���j�~vm�\u00174���1±��7�6�/\\�\u000by\u001c���|����^�������Y����1����!6\u0002� A+#17] csv\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "id": "39206f4a-f4da-46bf-bafe-8d15a6a08521",
      "metadata": {
        "id": "39206f4a-f4da-46bf-bafe-8d15a6a08521"
      },
      "source": [
        "# Pergunta 10 -\n",
        "Com qual frequência o preço mais alto do dia da ação também é o preço de fechamento?"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "296e1e79-e83c-40d9-89fe-9bfc5db6adfd",
      "metadata": {
        "id": "296e1e79-e83c-40d9-89fe-9bfc5db6adfd",
        "outputId": "7439de10-dbb9-4996-cc05-7946918cc448"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "1.1986301369863013"
            ]
          },
          "execution_count": 89,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "df.filter((df['high'] == df['close'])).count()/df.count()*100\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "f75a6731-dc1c-4884-bb89-03a075801b5f",
      "metadata": {
        "id": "f75a6731-dc1c-4884-bb89-03a075801b5f"
      },
      "source": [
        "# Pergunta 11 -\n",
        "Em qual dia a ação da Apple mais subiu entre a abertura e o fechamento, de forma absoluta?"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "faf017ae-dedb-4147-a256-47a64b7c7151",
      "metadata": {
        "id": "faf017ae-dedb-4147-a256-47a64b7c7151",
        "outputId": "f47d0e7d-f7ea-4834-852c-6849eeb631a7"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "+----------+-------+------+--------+------+---------+----+------------------+\n",
            "|      date|   open|  high|     low| close|   volume|Name|               abs|\n",
            "+----------+-------+------+--------+------+---------+----+------------------+\n",
            "|2015-08-24|  94.87| 108.8|    92.0|103.12|162206292|AAPL|              8.25|\n",
            "|2018-02-06| 154.83|163.72|   154.0|163.03| 68243838|AAPL| 8.199999999999989|\n",
            "|2015-08-25| 111.11|111.11|   103.5|103.74|103601599|AAPL|7.3700000000000045|\n",
            "|2017-06-09| 155.19|155.19|  146.02|148.98| 64882657|AAPL| 6.210000000000008|\n",
            "|2018-02-02|  166.0| 166.8|   160.1| 160.5| 86593825|AAPL|               5.5|\n",
            "|2015-08-21| 110.43| 111.9| 105.645|105.76|128275471|AAPL| 4.670000000000002|\n",
            "|2017-08-10|  159.9| 160.0|  154.63|155.32| 40804273|AAPL|4.5800000000000125|\n",
            "|2015-08-11| 117.81|118.18|  113.33|113.49| 97082814|AAPL| 4.320000000000007|\n",
            "|2014-09-03|  103.1| 103.2|   98.58| 98.94|125420521|AAPL| 4.159999999999997|\n",
            "|2017-05-08| 149.03| 153.7|  149.03|153.01| 48752413|AAPL|3.9799999999999898|\n",
            "|2014-12-09| 110.19| 114.3|  109.35|114.12| 60208036|AAPL| 3.930000000000007|\n",
            "|2015-04-28|134.455|134.54|  129.57|130.56|118923970|AAPL|3.8950000000000102|\n",
            "|2015-07-09| 123.85|124.06|  119.22|120.07| 78595038|AAPL| 3.780000000000001|\n",
            "|2015-09-29| 112.83|113.51|  107.86|109.06| 73365384|AAPL| 3.769999999999996|\n",
            "|2017-10-27| 159.29| 163.6|   158.7|163.05| 44454160|AAPL|3.7600000000000193|\n",
            "|2014-12-01| 118.81|119.25|  111.27|115.07| 83814037|AAPL| 3.740000000000009|\n",
            "|2015-12-04| 115.29|119.25|  115.11|119.03| 57776977|AAPL| 3.739999999999995|\n",
            "|2015-09-09| 113.76|114.02|  109.77|110.15| 85010804|AAPL|3.6099999999999994|\n",
            "|2018-02-07|163.085| 163.4|159.0685|159.54| 51608580|AAPL| 3.545000000000016|\n",
            "|2017-12-11|  169.2|172.89|  168.79|172.67| 35273759|AAPL| 3.469999999999999|\n",
            "+----------+-------+------+--------+------+---------+----+------------------+\n",
            "only showing top 20 rows\n",
            "\n"
          ]
        }
      ],
      "source": [
        "#valro absoluto seria quantas vezes o maior valor subiu entre abertura e fechamento... (  open - close)\n",
        "from pyspark.sql.functions import abs\n",
        "# df.filter(df['Name'] == 'AAPL').sort(desc('high')).show()\n",
        "df.filter(df['Name'] == 'AAPL').withColumn('abs',abs(df['open'] - df['close'])).sort(desc('abs')).show()"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "c25d035c-8449-4535-946e-13e985ed3ee7",
      "metadata": {
        "id": "c25d035c-8449-4535-946e-13e985ed3ee7"
      },
      "source": [
        "Pergunta 12 -\n",
        "Em média, qual o volume diário de transações das ações da AAPL?"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "fac84272-674c-4e6e-995c-0452a44ca1aa",
      "metadata": {
        "id": "fac84272-674c-4e6e-995c-0452a44ca1aa",
        "outputId": "2d8928ad-2536-43d3-c91d-bbc8d4020cc0"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "+----+------------------+------------------+------------------+------------------+-------------------+\n",
            "|Name|         avg(open)|         avg(high)|          avg(low)|        avg(close)|        avg(volume)|\n",
            "+----+------------------+------------------+------------------+------------------+-------------------+\n",
            "|AAPL|109.05542891183475|109.95111834789516|108.14158888006372|109.06669849086583|5.404789973550437E7|\n",
            "+----+------------------+------------------+------------------+------------------+-------------------+\n",
            "\n"
          ]
        }
      ],
      "source": [
        "df.groupBy('Name').mean().filter((df['Name'] == 'AAPL')).show()"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "565bb071-7c6b-4a38-bd42-cd95697d2850",
      "metadata": {
        "id": "565bb071-7c6b-4a38-bd42-cd95697d2850"
      },
      "source": [
        "# Pergunta 13 - Quantas ações tem 1, 2, 3, 4 e 5 caracteres em seu nome, respectivamente?"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "c1cd475a-5e68-4566-bf04-b5ba883a4e2a",
      "metadata": {
        "id": "c1cd475a-5e68-4566-bf04-b5ba883a4e2a",
        "outputId": "314aa744-fb0a-4d5e-ab6e-62ee89e8615a"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "+-----+-----+\n",
            "|n_car|count|\n",
            "+-----+-----+\n",
            "|    1|   10|\n",
            "|    2|   50|\n",
            "|    3|  323|\n",
            "|    4|  117|\n",
            "|    5|    5|\n",
            "+-----+-----+\n",
            "\n"
          ]
        }
      ],
      "source": [
        "from pyspark.sql.functions import char_length\n",
        "df.groupBy('Name').count().withColumn('n_car',char_length(df['Name'])).groupBy('n_car').count().sort('n_car').show()"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "e09c0da2-6801-45e5-bd8c-d9d1727b25ed",
      "metadata": {
        "id": "e09c0da2-6801-45e5-bd8c-d9d1727b25ed"
      },
      "source": [
        "# Pergunta 14 - Qual a ação menos negociada da bolsa, em volume de transações? (errada?)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "d1a0334c-b9dc-4e07-93dd-af92a62db0b6",
      "metadata": {
        "id": "d1a0334c-b9dc-4e07-93dd-af92a62db0b6",
        "outputId": "e8508ebc-c24d-41e4-dc4e-f4ad49f132f3"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "+----+------------------+------------------+------------------+------------------+------------------+\n",
            "|Name|         avg(open)|         avg(high)|          avg(low)|        avg(close)|       avg(volume)|\n",
            "+----+------------------+------------------+------------------+------------------+------------------+\n",
            "| MTD| 356.1008260524226|359.26321008737136|353.07946386020694|356.29749801429693|170365.17394757745|\n",
            "| AZO| 619.6706155679113| 624.9363382843524| 614.2743500397141| 619.7036536934078| 315794.3820492454|\n",
            "| HII| 133.7071207307387|134.96373566322487| 132.4617134233518|133.80019857029404| 332637.9253375695|\n",
            "|  RE| 182.8679308975376|184.24131231135829|181.48712970611592| 182.9029229547261|344747.58935663226|\n",
            "| ESS|207.68152899126295|209.43700254169963| 205.8673584590945|207.71353455123113|378875.95869737887|\n",
            "| SNA|139.25889197775984| 140.3301930897539|138.14591501191416| 139.2899920571884| 421194.4741858618|\n",
            "| FRT|130.11644956314527| 131.1029009531374| 129.0457312152501|130.10448768864165|421801.35266084195|\n",
            "|ANSS| 93.53625496425728| 94.36010738681487| 92.74584773629866| 93.60052343129472| 439197.7855440826|\n",
            "| IFF|111.76356235107224|112.60822454328824|110.92285520254175| 111.8052343129467| 443823.5035742653|\n",
            "| AMG|179.20622319301026|180.92498673550452|177.34026727561582| 179.1746624305003|451857.10166799044|\n",
            "| COO|165.25387918983333|166.77239499602874|163.73045861795072| 165.3405718824464| 452728.4646544877|\n",
            "|  IT| 86.71324861000805| 87.41529634630655| 86.01813574265286|  86.7662589356633|459504.09213661635|\n",
            "| ROP|171.93527005559946|173.17883621922164|170.73833304209714| 172.0563860206513|460262.85941223195|\n",
            "| AYI|166.81832406671987|168.68746004765686|164.93941397934864| 166.8921842732327|483442.64892772044|\n",
            "| WAT|131.25476489277204|132.29932223987316|130.20162454328835|131.31683478951572| 500379.5798252581|\n",
            "| TDG|214.95658459094508|216.93646417791902|212.99307815726763|215.10420174741841|512264.17950754566|\n",
            "| ARE| 91.94706513105636| 92.68540198570297|  91.1907808578236| 91.98567911040521| 527525.8800635425|\n",
            "| AIZ| 75.36168387609214| 75.98690786338359|  74.7874548848292| 75.40227164416207| 545139.3129467831|\n",
            "|CINF|59.409670373312174| 59.78566703733112| 58.99979714058775| 59.41681493248607| 598607.2176330421|\n",
            "| MAA| 83.36211278792692| 84.04072255758538| 82.65178181096107| 83.38066719618752| 601451.2231930103|\n",
            "+----+------------------+------------------+------------------+------------------+------------------+\n",
            "only showing top 20 rows\n",
            "\n"
          ]
        }
      ],
      "source": [
        "df.groupBy('Name').avg().sort('avg(volume)').show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "6dc89327-8186-4a39-b3b9-05024256ca60",
      "metadata": {
        "id": "6dc89327-8186-4a39-b3b9-05024256ca60"
      },
      "outputs": [],
      "source": []
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3 (ipykernel)",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.11.6"
    },
    "colab": {
      "provenance": [],
      "include_colab_link": true
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}
